@inherits LayoutComponentBase

@using Microsoft.AspNetCore.SignalR.Client
@using blazor_server_status.Data;
@using blazor_server_status.Models;
@inject NavigationManager Navigation
@inject ServerPingService servicePingService
@implements IAsyncDisposable

@if (servers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Server Name</th>
                <th>Host</th>
                <th>Status</th>
                <th>Last Check</th>
                <th>Next Check</th>
                <th>Last Update</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var server in servers)
            {
                <tr @onclick="()=> ShowLog(server.Host)">
                    <td>@server.Name</td>
                    <td>@server.Host:@server.Port</td>
                    <td>@server.MessageStatus</td>
                    <td>@server.LastCheck</td>
                    <td>@server.NextCheck</td>
                    <td>@server.LastUpdate</td>
                </tr>
            }
            @foreach (var item in CurrentLogs)
            {
                <tr>@item.Message</tr>
            }
        </tbody>
    </table>
}



@code {
    private List<ServerModel>? servers;
    private HubConnection? hubConnection;
    private bool collapseNavMenu = true;
    private List<LogModel> CurrentLogs = new List<LogModel>();
    private string? CurrentHost;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ShowLog(string host)
    {
        CurrentHost = host;
        UpdateLogs();
        ToggleNavMenu();
    }
    private void UpdateLogs()
    {
        if (CurrentHost is null)
            return;
        CurrentLogs = servicePingService.GetServerInfo(CurrentHost);
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                    .WithUrl("http://host.docker.internal:5000/serverhub")

            //.WithUrl(Navigation.ToAbsoluteUri("/serverhub"))
            .Build();

        hubConnection.On<string>("NotifyServerChange", (message) =>
        {
            servers = System.Text.Json.JsonSerializer.Deserialize<List<ServerModel>>(message);
            UpdateLogs();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
    public bool IsConnected =>
     hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
 }
